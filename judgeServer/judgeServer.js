// Generated by CoffeeScript 1.6.2
var AppConfig, LogConfig, app, cluster, config, express, http, log4js, new_worker_env, node_config, num_cpu, server, worker, workerID;

express = require('express');

cluster = require('cluster');

log4js = require('crafity-log4js');

http = require('http');

app = express();

/* ------- Class ------------------------------------------
*/


node_config = require('../node-config.json');

config = require("../config");

AppConfig = new config.AppConfig(3001, __dirname);

LogConfig = new config.LogConfig(__dirname);

/* ------- middleware call. -------------------------------
*/


app.configure(function() {
  var logger;

  logger = log4js.getLogger('file');
  log4js.configure({
    appenders: [
      {
        'type': 'console'
      }, {
        'type': 'file',
        'filename': LogConfig.getName(),
        'maxLogSize': LogConfig.getSize(),
        'pattern': LogConfig.getPattern(),
        'category': 'console'
      }
    ],
    replaceConsole: LogConfig.getStdout()
  });
  app.use(log4js.connectLogger(logger, {
    nolog: LogConfig.getNolog(),
    format: LogConfig.format()
  }));
  app.use(express.methodOverride());
  app.use(express["static"](AppConfig.getPublic()));
  return console.log("configure opption");
});

/* ------- create httpServer.------------------------------
*/


if (cluster.isMaster) {
  num_cpu = require('os').cpus().length;
  workerID = 0;
  while (workerID < num_cpu) {
    new_worker_env = {};
    new_worker_env["WORKER_NAME"] = "worker" + workerID;
    new_worker_env["WORKER_PORT"] = AppConfig.getPort() + workerID;
    new_worker_env["WORKER_STATE"] = false;
    worker = cluster.fork(new_worker_env);
    workerID++;
  }
} else {
  server = http.createServer(app);
  server.listen(process.env["WORKER_PORT"], function() {
    var database, database_root, timer_id;

    console.log("Master Server listening on " + process.env["WORKER_PORT"]);
    database_root = "../db/database";
    database = require(database_root)({
      config: node_config
    });
    return timer_id = setTimeout(function() {
      var controller_root;

      controller_root = "" + __dirname + "/routes/controller";
      return console.log("" + (require(controller_root)({
        app: app,
        database: database
      })));
    }, 100);
  });
}

/* ------- Error. -----------------------------------------
*/


process.on('uncaughtException', function(err) {
  console.log("err >  " + err);
  return console.error("uncaughtException >  " + err.stack);
});
