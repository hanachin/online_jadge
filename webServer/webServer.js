// Generated by CoffeeScript 1.6.2
/* ------- Module dependencies. ---------------------------
*/

var app, cluster, express, http, server;

express = require('express');

cluster = require('cluster');

app = express();

/* ------- Module dependencies. ---------------------------
*/


/* ------- middleware call. -------------------------------
*/


app.configure(function() {
  var bodyParserOptions, engine, log4js, logger, sessionstore, store;

  app.set('port', 3000);
  app.set('views', "" + __dirname + "/views");
  engine = require('ejs-locals');
  app.engine('ejs', engine);
  app.set('view engine', 'ejs');
  app.use(express.favicon());
  log4js = require('crafity-log4js');
  logger = log4js.getLogger('file');
  log4js.configure({
    appenders: [
      {
        'type': 'console'
      }, {
        'type': 'file',
        'filename': "" + __dirname + "/logs/pxp_lab.log",
        'maxLogSize': 1024 * 1024,
        'pattern': '-yyyy-MM-dd',
        'category': 'console'
      }
    ],
    replaceConsole: true
  });
  app.use(log4js.connectLogger(logger, {
    nolog: ['\\css', '\\.js', '\\.gif', '\\.jpg', '\\.png'],
    format: JSON.stringify({
      'method': ':method',
      'request': ':url',
      'status': ':status',
      'user-agent': ':user-agent'
    })
  }));
  app.use(express.compress());
  bodyParserOptions = {
    uploadDir: "" + __dirname + "/tmp",
    isKeepExtensions: true
  };
  app.use(express.bodyParser(bodyParserOptions));
  sessionstore = require('session-mongoose')(express);
  store = new sessionstore({
    url: "mongodb://localhost/lab_session",
    interval: 60 * 60 * 1000 * 24
  });
  app.use(express.cookieParser('pxp_ss'));
  app.use(express.session({
    secret: 'pxp_ss',
    store: store,
    cookie: {
      httpOnly: true,
      maxAge: new Date(Date.now() + 60 * 60 * 1000 * 24)
    }
  }));
  app.use(express.methodOverride());
  app.use(express["static"]("" + __dirname + "/public"));
  return console.log("configure opption");
});

/* ------- middleware call. -------------------------------
*/


/* ------- create httpServer.------------------------------
*/


if (cluster.isMaster) {
  http = require('http');
  server = http.createServer(app);
  server.listen(app.get('port'), function() {
    var database, database_root, timer_id;

    console.log("Master Server listening on " + (app.get('port')));
    database_root = "" + __dirname + "/routes/database";
    database = require(database_root)();
    return timer_id = setTimeout(function() {
      var controller_root;

      controller_root = "" + __dirname + "/routes/controller";
      return console.log("" + (require(controller_root)({
        app: app,
        database: database
      })));
    }, 100);
  });
}

/* ------- create httpServer.------------------------------
*/


/* ------- Error. -----------------------------------------
*/


process.on('uncaughtException', function(err) {
  console.log("err >  " + err);
  return console.error("uncaughtException >  " + err.stack);
});

/* ------- Error. ---------- ------------------------------
*/

