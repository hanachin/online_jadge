// Generated by CoffeeScript 1.6.2
/* ------- Module dependencies. ------------
*/

var AppConfig, LogConfig, SessionConfig, app, cluster, engine, express, http, log4js, server, sio;

express = require('express');

cluster = require('cluster');

engine = require('ejs-locals');

log4js = require('crafity-log4js');

http = require('http');

sio = require('socket.io');

app = express();

/* ------- Class ---------------------------
*/


AppConfig = (function() {
  var _engine, _keepExtention, _port, _public, _tmpdir, _views;

  function AppConfig() {}

  _port = 3000;

  _tmpdir = "" + __dirname + "/tmp";

  _keepExtention = true;

  _views = "" + __dirname + "/views";

  _public = "" + __dirname + "/public";

  _engine = "ejs";

  AppConfig.getPort = function() {
    return _port;
  };

  AppConfig.getView = function() {
    return _tmpdir;
  };

  AppConfig.getPublic = function() {
    return _public;
  };

  AppConfig.getEngine = function() {
    return _engine;
  };

  AppConfig.upload = function() {
    return {
      uploadDir: _tmpdir,
      isKeepExtensions: _keepExtention
    };
  };

  return AppConfig;

})();

LogConfig = (function() {
  var _date, _log, _size;

  function LogConfig() {}

  _log = "" + __dirname + "/logs/";

  _size = 1024 * 1024;

  _date = '-yyyy-MM-dd';

  LogConfig.getName = function() {
    return "" + _log + "/pxp_log";
  };

  LogConfig.getSize = function() {
    return _size;
  };

  LogConfig.getStdout = function() {
    return false;
  };

  LogConfig.getPattern = function() {
    return _date;
  };

  LogConfig.getNolog = function() {
    return ['\\.css', '\\.js', '\\.gif', '\\.jpg', '\\.png'];
  };

  LogConfig.format = function() {
    return JSON.stringify({
      'method': ':method',
      'request': ':url',
      'status': ':status',
      'user-agent': ':user-agent'
    });
  };

  return LogConfig;

})();

SessionConfig = (function() {
  var _access, _interval, _limit, _path, _secret, _sessionstore;

  function SessionConfig() {}

  _sessionstore = require('session-mongoose')(express);

  _path = 'mongodb://localhost/lab_session';

  _access = false;

  _interval = 60 * 60 * 1000 * 24;

  _limit = new Date(Date.now() + _interval);

  _secret = 'pxp_ss';

  SessionConfig.getSecret = function() {
    return _secret;
  };

  SessionConfig.getStore = function() {
    return new _sessionstore({
      url: _path,
      interval: _interval
    });
  };

  SessionConfig.getCookie = function() {
    return {
      httpOnly: _access,
      maxAge: _limit
    };
  };

  return SessionConfig;

})();

/* ------- middleware ------------------------
*/


app.configure(function() {
  var logger;

  app.set('port', AppConfig.getPort());
  app.set('views', AppConfig.getView());
  app.engine('ejs', engine);
  app.set('view engine', AppConfig.getEngine());
  app.use(express.favicon());
  logger = log4js.getLogger('file');
  log4js.configure({
    appenders: [
      {
        'type': 'console'
      }, {
        'type': 'file',
        'filename': LogConfig.getName(),
        'maxLogSize': LogConfig.getSize(),
        'pattern': LogConfig.getPattern(),
        'category': 'console'
      }
    ],
    replaceConsole: LogConfig.getStdout()
  });
  app.use(log4js.connectLogger(logger, {
    nolog: LogConfig.getNolog(),
    format: LogConfig.format()
  }));
  app.use(express.compress());
  app.use(express.bodyParser(AppConfig.upload()));
  app.use(express.cookieParser(SessionConfig.getSecret()));
  app.use(express.session({
    secret: SessionConfig.getSecret(),
    store: SessionConfig.getStore(),
    cookie: SessionConfig.getCookie()
  }));
  app.use(express.methodOverride());
  app.use(express["static"](AppConfig.getPublic()));
  return console.log("app opption setup.");
});

/* ------- create httpServer.-----------------
*/


if (cluster.isMaster) {
  server = http.createServer(app);
  server.listen(app.get('port'), function() {
    var database, database_root, socketServer, timer_id;

    console.log("Master Server listening on " + (app.get('port')));
    database_root = "" + __dirname + "/routes/database";
    database = require(database_root)();
    socketServer = require("" + __dirname + "/routes/socket_server");
    console.log("" + (socketServer.setup(app, http, sio, SessionConfig)));
    return timer_id = setTimeout(function() {
      var controller;

      controller = "" + __dirname + "/routes/controller";
      return console.log("" + (require(controller)({
        app: app,
        database: database
      })));
    }, 100);
  });
}

/* ------- Error. -----------------------------------------
*/


process.on('uncaughtException', function(err) {
  console.log("err >  " + err);
  return console.error("uncaughtException >  " + err.stack);
});
