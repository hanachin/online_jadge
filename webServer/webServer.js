// Generated by CoffeeScript 1.6.2
/* ------- Module dependencies. ------------
*/

var AppConfig, LogConfig, SessionConfig, app, cluster, engine, express, http, log4js, server, sio;

express = require('express');

cluster = require('cluster');

engine = require('ejs-locals');

log4js = require('crafity-log4js');

http = require('http');

sio = require('socket.io');

app = express();

/* ------- Class ---------------------------
*/


AppConfig = (function() {
  var _keepExtention, _tmpdir;

  function AppConfig() {}

  _tmpdir = "" + __dirname + "/tmp";

  _keepExtention = true;

  AppConfig.port = 3000;

  AppConfig.views = "" + __dirname + "/views";

  AppConfig["public"] = "" + __dirname + "/public";

  AppConfig.engine = "ejs";

  AppConfig.upload = {
    uploadDir: _tmpdir,
    isKeepExtensions: _keepExtention
  };

  return AppConfig;

})();

LogConfig = (function() {
  function LogConfig() {}

  LogConfig.log = "" + __dirname + "/logs/";

  LogConfig.filename = "" + LogConfig.log + "/pxp_log";

  LogConfig.size = 1024 * 1024;

  LogConfig.format = '-yyyy-MM-dd';

  LogConfig.stdout = false;

  LogConfig.nolog = ['\\.css', '\\.js', '\\.gif', '\\.jpg', '\\.png'];

  LogConfig.format = JSON.stringify({
    'method': ':method',
    'request': ':url',
    'status': ':status',
    'user-agent': ':user-agent'
  });

  return LogConfig;

})();

SessionConfig = (function() {
  var _access, _interval, _limit, _path, _sessionstore;

  function SessionConfig() {}

  _sessionstore = require('session-mongoose')(express);

  _path = 'mongodb://localhost/lab_session';

  _access = false;

  _interval = 60 * 60 * 1000 * 24;

  _limit = new Date(Date.now() + _interval);

  SessionConfig.secret = 'pxp_ss';

  SessionConfig.store = new _sessionstore({
    url: _path,
    interval: _interval
  });

  SessionConfig.cookie = {
    httpOnly: _access,
    maxAge: _limit
  };

  return SessionConfig;

})();

/* ------- middleware ------------------------
*/


app.configure(function() {
  var logger;

  app.set('port', AppConfig.port);
  app.set('views', AppConfig.views);
  app.engine('ejs', engine);
  app.set('view engine', AppConfig.engine);
  app.use(express.favicon());
  logger = log4js.getLogger('file');
  log4js.configure({
    appenders: [
      {
        'type': 'console'
      }, {
        'type': 'file',
        'filename': LogConfig.filename,
        'maxLogSize': LogConfig.size,
        'pattern': LogConfig.format,
        'category': 'console'
      }
    ],
    replaceConsole: LogConfig.stdout
  });
  app.use(log4js.connectLogger(logger, {
    nolog: LogConfig.nolog,
    format: LogConfig.format
  }));
  app.use(express.compress());
  app.use(express.bodyParser(AppConfig.upload));
  app.use(express.cookieParser(SessionConfig.secret));
  app.use(express.session({
    secret: SessionConfig.secret,
    store: SessionConfig.store,
    cookie: SessionConfig.cookie
  }));
  app.use(express.methodOverride());
  app.use(express["static"](AppConfig["public"]));
  return console.log("app opption setup.");
});

/* ------- create httpServer.-----------------
*/


if (cluster.isMaster) {
  server = http.createServer(app);
  server.listen(app.get('port'), function() {
    var database, database_root, socketServer, timer_id;

    console.log("Master Server listening on " + (app.get('port')));
    database_root = "" + __dirname + "/routes/database";
    database = require(database_root)();
    socketServer = require("" + __dirname + "/routes/socket_server");
    console.log("" + (socketServer.setup(app, http, sio)));
    return timer_id = setTimeout(function() {
      var controller;

      controller = "" + __dirname + "/routes/controller";
      return console.log("" + (require(controller)({
        app: app,
        database: database
      })));
    }, 100);
  });
}

/* ------- Error. -----------------------------------------
*/


/*
process.on 'uncaughtException', (err) ->
  console.log "err >  #{err}"
  console.error "uncaughtException >  #{err.stack}"
*/

