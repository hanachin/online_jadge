// Generated by CoffeeScript 1.4.0
var insertQueue, requestJadgeServer, resJadgeResult, serverTable;

exports.main = function(req, res, dataBase) {
  var async, http, ip_address, questionNo, source, submitQueueTable, username;
  async = require('async');
  http = require('http');
  username = req.session.username;
  questionNo = req.body.questionNo;
  source = req.body.source;
  ip_address = req.ip;
  submitQueueTable = dataBase.submitQueueTable;
  async.series([
    function(callBack) {
      return insertQueue(username, questionNo, source, submitQueueTable, callBack);
    }, function(callBack) {
      return callBack(null, 2);
    }, function(callBack) {
      return requestJadgeServer(req, http.get, callBack);
    }, function(callBack) {
      return resJadgeResult(req, res, callBack);
    }
  ], function(err, result) {
    if (err) {
      throw err;
      res.redirect('/');
    }
    return console.log("requestJadgeServer all done. " + result);
  });
  return console.log("requestJadgeServer ---------- " + ip_address);
};

insertQueue = function(username, questionNo, source, submitQueueTable, callBack) {
  var insert_obj, saveData;
  insert_obj = {
    userID: username,
    questionNo: questionNo,
    source: source
  };
  saveData = submitQueueTable.build(insert_obj);
  return saveData.save().success(function() {
    console.log('submitQueueTable save success');
    return callBack(null, 1);
  }).error(function(error) {
    return console.log("submitQueueTable save Error >> " + error);
  });
};

/*
httpリクエスト投げすぎるとsocket hung up ?というエラーが起きるのでひとまずコメントアウト
checkJadgeServer = (req, reqHttp, callBack, jadgeServerID) ->
  # チェックした結果すべてのジャッジサーバが作業中の場合、１秒待ったあとに再度この関数を実行する
  cpu_num = require('os').cpus().length
  if (jadgeServerID > 3001 + cpu_num - 1)
    setTimeout(checkJadgeServer, 1000, req, reqHttp, callBack, 0)
    return

  # リクエスト先の設定
  options = {
    hostname : 'localhost'
    port     : "#{3001 + jadgeServerID}"
    path     : '/check_jadge'
  }

  # httpリクエストを送信する
  # checkの結果 -> true：callBack関数を実行し、実際にジャッジを頼むリクエストを発行する
  #             -> false：他のジャッジサーバが空いていないかチェックする
  requestCheck = reqHttp(options,  (res) ->
    console.log "StatusCode : #{res.statusCode}"
    res.on('data', (check_result) ->
      console.log "JadgeServer #{jadgeServerID} check Response:  #{res}"
      if (check_result is true)
        req.jadgeServerID = jadgeServerID
        callBack(null, 2)
        return
      else
        checkJadgeServer(req, reqHttp, callBack, jadgeServerID + 1)
    )
  ).on('error', (error) ->
    console.log "check err #{error}"
  )
*/


serverTable = [false, false];

requestJadgeServer = function(req, reqHttp, callBack) {
  var i, options, requestJadge;
  i = 0;
  while (i < serverTable.length) {
    if (serverTable[i] === false) {
      serverTable[i] = true;
      options = {
        hostname: 'localhost',
        port: 3001 + i,
        path: '/request_jadge'
      };
      requestJadge = reqHttp(options, function(res) {
        serverTable[i] = false;
        console.log("request Server " + (3001 + i));
        console.log("StatusCode : " + res.statusCode);
        res.setEncoding('utf8');
        return res.on('data', function(jadge_result) {
          console.log("JadgeServer Response:  " + jadge_result);
          req.result = jadge_result;
          callBack(null, 2);
        }).on('error', function(error) {
          return console.log("problem with request : " + error);
        });
      });
      return;
    }
    i++;
  }
  return setTimeout(requestJadgeServer, 1000, req, reqHttp, callBack);
};

resJadgeResult = function(req, res, callBack) {
  res.json(req.result);
  return callBack(null, 3);
};
