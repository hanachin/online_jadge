// Generated by CoffeeScript 1.6.2
var checkJudgeServer, judgeServerTable, requestJudgeServer, resJudgeResult;

exports.main = function(data, socket, sio, dataBase) {
  var async, http, questionNo, source, submitQueueTable, username;

  async = require('async');
  http = require('http');
  username = "test";
  console.log(username);
  console.log(socket.handshake.session);
  questionNo = data.questionNo;
  source = data.source;
  data.judgeServerID = '';
  data.resultJSON = '';
  submitQueueTable = dataBase.submitQueueTable;
  return async.series([
    function(callBack) {
      return checkJudgeServer(data, callBack);
    }, function(callBack) {
      return requestJudgeServer(data, username, http.get, callBack);
    }, function(callBack) {
      return resJudgeResult(data, sio, callBack);
    }
  ], function(err, result) {
    if (err) {
      throw err;
      res.redirect('/');
    }
    return console.log("requestJudgeServer all done. " + result);
  });
};

judgeServerTable = [false, false];

checkJudgeServer = function(data, callBack) {
  var judgeID, _, _i, _len;

  for (judgeID = _i = 0, _len = judgeServerTable.length; _i < _len; judgeID = ++_i) {
    _ = judgeServerTable[judgeID];
    if (judgeServerTable[judgeID] === false) {
      judgeServerTable[judgeID] = true;
      data.judgeServerID = judgeID;
      callBack(null, 1);
      return;
    }
  }
};

requestJudgeServer = function(data, username, reqHttp, callBack) {
  var options, req_port, requestJudge;

  req_port = 3001 + data.judgeServerID;
  options = {
    hostname: 'localhost',
    port: req_port,
    path: "/request_judge?username=" + username + "&questionNo=" + data.questionNo + "&source=" + data.source
  };
  return requestJudge = reqHttp(options, function(res) {
    console.log("request Server " + req_port);
    console.log("StatusCode : " + res.statusCode);
    res.setEncoding('utf8');
    return res.on('data', function(result) {
      console.log("JudgeServer Response:  " + result);
      data.result = result;
      judgeServerTable[data.judgeServerID] = false;
      callBack(null, 2);
    }).on('error', function(err) {
      return console.log("problem with request : " + err);
    });
  });
};

resJudgeResult = function(data, sio, callBack) {
  sio.sockets.emit('result_judge', data.result);
  return callBack(null, 3);
};
