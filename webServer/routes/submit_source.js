// Generated by CoffeeScript 1.4.0
var counter, insertQueue, max_connect, requestJadgeServer, resJadgeResult;

exports.main = function(req, res, dataBase) {
  var async, http, ip_address, questionNo, source, submitQueueTable, username;
  async = require('async');
  http = require('http');
  username = req.session.username;
  questionNo = req.body.questionNo;
  source = req.body.source;
  ip_address = req.ip;
  submitQueueTable = dataBase.submitQueueTable;
  async.series([
    function(callBack) {
      return insertQueue(username, questionNo, source, submitQueueTable, callBack);
    }, function(callBack) {
      return requestJadgeServer(req, http.get, callBack);
    }, function(callBack) {
      return resJadgeResult(req, res, callBack);
    }
  ], function(err, result) {
    if (err) {
      throw err;
      res.redirect('/');
    }
    return console.log("requestJadgeServer all done. " + result);
  });
  return console.log("requestJadgeServer ---------- " + ip_address);
};

insertQueue = function(username, questionNo, source, submitQueueTable, callBack) {
  var insert_obj, saveData;
  insert_obj = {
    userID: username,
    questionNo: questionNo,
    source: source
  };
  saveData = submitQueueTable.build(insert_obj);
  return saveData.save().success(function() {
    console.log('submitQueueTable save success');
    return callBack(null, 1);
  }).error(function(error) {
    return console.log("submitQueueTable save Error >> " + error);
  });
};

counter = 0;

max_connect = 5;

requestJadgeServer = function(req, reqHttp, callBack) {
  var options, requestJadge;
  options = {
    hostname: 'localhost',
    port: '3001',
    path: '/request_jadge'
  };
  counter++;
  if (counter < max_connect) {
    return requestJadge = reqHttp(options, function(res) {
      counter--;
      console.log("StatusCode : " + res.statusCode);
      res.setEncoding('utf8');
      return res.on('data', function(jadge_result) {
        console.log("JadgeServer Response:  " + jadge_result);
        req.result = jadge_result;
        return callBack(null, 2);
      }).on('error', function(err) {
        console.log("problem with request : " + err.message);
        return req.error = err;
      });
    });
  } else {
    setTimeout(requestJadgeServer, 1000, req, reqHttp, callBack);
  }
};

resJadgeResult = function(req, res, callBack) {
  res.json(req.result);
  return callBack(null, 3);
};
