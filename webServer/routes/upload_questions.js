// Generated by CoffeeScript 1.6.2
var answerSave, exampleSave, mvTmpfile, questionSave, sendMsg, xmlParse;

exports.main = function(req, res, dataBase) {
  var answerTable, async, cheerio, exampleTable, filename, fs, ip_address, questionTable, target_path, tmp_path;

  async = require('async');
  fs = require('fs');
  cheerio = require('cheerio');
  tmp_path = req.files.uploads[0].path;
  target_path = "" + __dirname + "/../public/uploaded/Question/" + req.files.uploads[0].name;
  filename = req.files.uploads[0].name;
  ip_address = req.ip;
  questionTable = dataBase.questionTable;
  exampleTable = dataBase.exampleTable;
  answerTable = dataBase.answerTable;
  req.gradeNo = "";
  req.lsssonNo = "";
  req.explanation = "";
  req.questionNo = "";
  req.input_ex = [];
  req.output_ex = [];
  req.testcase = [];
  req.answer = [];
  async.series([
    function(callBack) {
      return mvTmpfile(tmp_path, target_path, fs.rename, callBack);
    }, function(callBack) {
      return xmlParse(req, target_path, fs.readFile, cheerio, callBack);
    }, function(callBack) {
      return questionSave(req, questionTable, callBack);
    }, function(callBack) {
      return exampleSave(req, exampleTable, callBack, 0);
    }, function(callBack) {
      return answerSave(req, answerTable, callBack, 0);
    }, function(callBack) {
      return sendMsg(res, filename, callBack);
    }
  ], function(err, results) {
    var obj;

    if (err) {
      throw err;
      obj = {
        test: "test",
        files: [
          {
            filename: filename,
            error: true
          }
        ]
      };
      res.json(obj);
    }
    return console.log('questionUpload all done. ' + results);
  });
  return console.log("questionUpload ---------- " + ip_address);
};

mvTmpfile = function(tmp_path, target_path, fsRename, callBack) {
  return fsRename(tmp_path, target_path, function(err) {
    if (err) {
      throw err;
      console.log("fileupload mv err");
    }
    console.log("tmpFilerename done.");
    return callBack(null, 1);
  });
};

xmlParse = function(req, target_path, readFile, cheerio, callBack) {
  return readFile(target_path, 'utf8', function(err, read_data) {
    var $;

    $ = cheerio.load(read_data, {
      ignoreWhitespace: true,
      xmlMode: true
    });
    req.gradeNo = $("grade_no").text();
    req.lessonNo = $("lesson_no").text();
    req.explanation = $("explanation").text();
    req.questionNo = $("question_no").text();
    $('input_ex').each(function(i, elem) {
      return req.input_ex[i] = $(this).text();
    });
    $('output_ex').each(function(i, elem) {
      return req.output_ex[i] = $(this).text();
    });
    $('input').each(function(i, elem) {
      return req.testcase[i] = $(this).text();
    });
    $('output').each(function(i, elem) {
      return req.answer[i] = $(this).text();
    });
    return callBack(null, 2);
  });
};

questionSave = function(req, questionTable, callBack) {
  var insert_obj, saveData;

  insert_obj = {
    questionNo: req.questionNo,
    gradeNo: req.gradeNo,
    lessonNo: req.lessonNo,
    explanation: req.explanation
  };
  saveData = questionTable.build(insert_obj);
  return saveData.save().success(function() {
    console.log('questionTable save success');
    return callBack(null, 3);
  }).error(function(error) {
    return console.log("questionTable Save Error");
  });
};

exampleSave = function(req, exampleTable, callBack, num) {
  var insert_obj, saveData;

  if (req.input_ex.length - 1 < num) {
    callBack(null, 4);
    return;
  }
  insert_obj = {
    questionNo: req.questionNo,
    input_ex: req.input_ex[num],
    output_ex: req.output_ex[num]
  };
  saveData = exampleTable.build(insert_obj);
  return saveData.save().success(function() {
    console.log('exampleTable save success');
    return exampleSave(req, exampleTable, callBack, num + 1);
  }).error(function(error) {
    return console.log("exampleTable Save Error >> " + error);
  });
};

answerSave = function(req, answerTable, callBack, num) {
  var insert_obj, saveData;

  if (req.answer.length - 1 < num) {
    callBack(null, 5);
    return;
  }
  insert_obj = {
    questionNo: req.questionNo,
    answer: req.answer[num],
    testcase: req.testcase[num]
  };
  saveData = answerTable.build(insert_obj);
  return saveData.save().success(function() {
    console.log('answerTable save success');
    return answerSave(req, answerTable, callBack, num + 1);
  }).error(function(error) {
    return console.log("answerTable Save Error");
  });
};

sendMsg = function(res, filename, callBack) {
  var obj;

  obj = {
    test: "test",
    files: [
      {
        filename: filename,
        error: false
      }
    ]
  };
  res.json(obj);
  return callBack(null, 6);
};
